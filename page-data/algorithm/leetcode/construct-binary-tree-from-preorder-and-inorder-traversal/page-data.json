{"componentChunkName":"component---src-templates-post-tsx","path":"/algorithm/leetcode/construct-binary-tree-from-preorder-and-inorder-traversal","result":{"data":{"logo":null,"markdownRemark":{"html":"<h1>문제</h1>\n<h2><a href=\"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal\">#105. Construct Binary Tree from Preorder and Inorder Traversal</a></h2>\n<p>Given preorder and inorder traversal of a tree, construct the binary tree.<br>\n<em>Note: You may assume that duplicates do not exist in the tree.</em></p>\n<h2>Example 1.</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: preorder = [3, 9, 20, 15, 7], inorder = [9, 3, 15, 20, 7]\nOutput: [3, 9, 20, null, null, 15, 7]</code></pre></div>\n<hr>\n<h1>해법</h1>\n<p>주어진 전위 순회(Preorder), 중위 순회(Inorder)의 특징을 이용하여 해결합니다.<br>\n전위 순회 배열을 <em>PRE</em>, 중위 순회 배열을 <em>IN</em>이라고 하겠습니다.<br>\n전위 순회의 첫 요소 *PRE[0]*는 전위 순회 특징에 따라 루트값 입니다.<br>\n그리고 *PRE[0]*의 값이 중위 순회 배열 <em>IN</em>중 *IN[7]*과 일치한다고 가정하겠습니다.<br>\n이때, 다음 두가지를 알 수 있습니다.</p>\n<ol>\n<li>*PRE[0]*은 루트노드이다.</li>\n<li>*IN[7]*을 기준으로 좌측 요소들(<em>IN[0]</em> ~ <em>IN[6]</em>)은 중위 순회 특징에 따라 왼쪽 노드에 존재하며,</li>\n</ol>\n<p>우측 요소들(<em>IN[8]</em> ~ <em>IN[max]</em>)은 중위 순회 특징에 따라 오른쪽 노드에 존재한다.</p>\n<p>재귀를 통해 이를 반복하면 트리를 구할 수 있습니다.</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 81.5126050420168%; position: relative; height: 0; overflow: hidden; margin-bottom: 1rem\" > <iframe src=\"//www.slideshare.net/slideshow/embed_code/key/K6zd9TegpFlFG7\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" allowfullscreen=\"\"> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/ssuser7b8f0f1/leetcode-105-construct-binary-tree-from-preorder-and-inorder-traversal\" title=\"[LeetCode] #105. Construct Binary Tree from Preorder and Inorder Traversal\" target=\"_blank\">[LeetCode] #105. Construct Binary Tree from Preorder and Inorder Traversal</a> </strong> from <strong><a href=\"https://www.slideshare.net/ssuser7b8f0f1\" target=\"_blank\">Mingyu Kim</a></strong> </div> </div>\n<h2>나의 해법</h2>\n<h3>성능</h3>\n<ul>\n<li>시간 복잡도 : <code class=\"language-text\">O(n)</code></li>\n<li>공간 복잡도 : <code class=\"language-text\">O(n!)</code></li>\n</ul>\n<h3>해법</h3>\n<p>재귀 호출을 통한 해법으로, 중위 순회값 <code class=\"language-text\">inorder</code>를 조정해 가며 트리를 구한다.</p>\n<ol>\n<li><code class=\"language-text\">genTree()</code> 함수를 통해 전위 순회 배열 <code class=\"language-text\">preorder</code>, 중위 순회 배열 <code class=\"language-text\">inorder</code> 값과 루트노드를 확인 할 수 있는 전위 순회의 인덱스 <code class=\"language-text\">preorderIndex</code>를 받는다.</li>\n<li><code class=\"language-text\">preorderIndex</code>가 전위 순회 배열 <code class=\"language-text\">preorder</code>의 사이즈를 넘어가면 null을 반환한다.</li>\n<li>루트노드의 값이 될 <code class=\"language-text\">val</code>을 구한다.</li>\n<li>루트노드의 값인 <code class=\"language-text\">val</code>이 중위 순회 배열에서 어느 인덱스에 존재하는지 구하여 <code class=\"language-text\">inorderIndex</code>에 할당한다.</li>\n<li>루트노드의 값 <code class=\"language-text\">val</code>이 현재 중위 순회 배열에 존재하지 않다면 (7) 혹은 (8)을 통한 다른쪽(왼쪽 혹은 오른쪽)에서 처리중이므로 <code class=\"language-text\">preorderIndex</code> 값을\n증가시킨 결과를 반환한다.<br>\n(이는 루트노드의 값이 중위 순회 배열에 값이 존재 할 때 까지 진행된다.)</li>\n<li>루트노드 <code class=\"language-text\">node</code>를 할당한다.</li>\n<li>위에서 구한 <code class=\"language-text\">inorderIndex</code>를 기준으로 중위 순회 배열의 <strong>왼쪽 배열</strong>들을 바탕으로 재귀 호출을 하고,\n얻은 결과를 현재 루트노드 <code class=\"language-text\">node</code>의 <strong>왼쪽 자식노드</strong>로 할당한다.</li>\n<li>위에서 구한 <code class=\"language-text\">inorderIndex</code>를 기준으로 중위 순회 배열의 <strong>오른쪽 배열</strong>들을 바탕으로 재귀 호출을 하고,\n얻은 결과를 현재 루트노드 <code class=\"language-text\">node</code>의 <strong>오른쪽 자식노드</strong>로 할당한다.</li>\n<li>현재까지 구한 노드를 반환한다.</li>\n</ol>\n<h3>Java 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructBinaryTreeFromPreorderAndInorderTraversal</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preorderIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preorderIndex <span class=\"token operator\">>=</span> preorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> preorder<span class=\"token punctuation\">[</span>preorderIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Integer</span> inorderIndex <span class=\"token operator\">=</span> <span class=\"token function\">foundIndex</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorderIndex <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preorderIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> leftInorder <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorderIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TreeNode</span> leftNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> leftInorder<span class=\"token punctuation\">,</span> preorderIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rightInorder <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> inorderIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TreeNode</span> rightNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> rightInorder<span class=\"token punctuation\">,</span> preorderIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">foundIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>최적 해법</h2>\n<h3>성능</h3>\n<ul>\n<li>시간 복잡도 : <code class=\"language-text\">O(n)</code></li>\n<li>공간 복잡도 : <code class=\"language-text\">O(n)</code></li>\n</ul>\n<h3>해법</h3>\n<p>위에서 알아보았던 해법과 전반적인 흐름은 동일하지만 몇가지 최적화가 이루어 졌다.</p>\n<ul>\n<li>추가적인 중위 순회 배열을 생성하지 않으며,</li>\n<li>다음 루트노드를 바로 찾아가서 위의 (5)와 같은 로직이 불필요하고,</li>\n<li>자식노드를 할당할 때 null 체크를 하지 않는다.<br>\n(자식노드에 null을 할당하여도 무방하기 때문이다.)</li>\n</ul>\n<p>최적화가 이루어진 해법은 다음과 같다.</p>\n<ol>\n<li><code class=\"language-text\">genTree()</code> 함수를 통해 전위 순회 배열 <code class=\"language-text\">preorder</code>, 중위 순회 배열 <code class=\"language-text\">inorder</code> 값과 루트노드를 확인 할 수 있는 전위 순회의 인덱스 <code class=\"language-text\">preorderIndex</code>를 받으며,\n추가적인 중위 순회 배열을 생성하지 않기 위해 중위 순회 시작 인덱스 <code class=\"language-text\">inorderStartIndex</code>, 종료 인덱스 <code class=\"language-text\">inorderEndIndex</code>를 받는다.</li>\n<li><code class=\"language-text\">preorderIndex</code>가 전위 순회 배열 <code class=\"language-text\">preorder</code>의 사이즈를 넘어가거나, 중위 순회 인덱스가 유효하지 않으면 null을 반환한다.</li>\n<li>전위 순회 인덱스인 <code class=\"language-text\">preorderIndex</code>는 루트노드의 값을 가르키므로 해당 값을 바탕으로 루트노드 <code class=\"language-text\">node</code>를 할당한다.<br>\n(아래의 (6-2)를 통하여 루트노드를 바로 찾을 수 있다.)</li>\n<li>루트노드의 값을 중위 순회 배열에서 찾는다.</li>\n</ol>\n<p>4-1. 중위 순회 시작 인덱스 <code class=\"language-text\">inorderStartIndex</code> 부터, 종료 인덱스 <code class=\"language-text\">inorderEndIndex</code> 까지 순회한다.<br>\n4-2. 중위 순회 배열에서 루트노드의 값과 동일한 인덱스를 찾으면 <code class=\"language-text\">inorderIndex</code>에 할당하고 순회를 종료한다.\n5. 왼쪽 자식노드를 찾아 할당한다.<br>\n5-1. <code class=\"language-text\">genTree()</code> 함수를 호출한다.<br>\n5-2. 전위 순회 배열중 현재노드의 <strong>왼쪽 자식노드</strong>의 값은 <code class=\"language-text\">preorderIndex</code> + 1 이고,<br>\n5-3. 중위 순회 배열의 시작 인덱스는, 현재까지 시작 제한점인 <code class=\"language-text\">inorderStartIndex</code>를 전달하고,<br>\n5-4. 중위 순회 배열의 종료 인덱스는, 위에서 찾은 현재노드의 인덱스 이전 까지인 <code class=\"language-text\">inorderIndex</code> - 1을 전달한다.<br>\n6. 오른쪽 자식노드를 찾아 할당한다.<br>\n6-1. <code class=\"language-text\">genTree()</code> 함수를 호출한다.<br>\n6-2. 전위 순회 배열중 현재노드의 <strong>오른쪽 자식노드</strong>의 값은 <code class=\"language-text\">preorderIndex</code> + <code class=\"language-text\">inorderIndex</code> - <code class=\"language-text\">inorderStartIndex</code> + 1 이고,<br>\n(오른쪽 자식노드의 값은, 현재노드의 값인 <code class=\"language-text\">preorderIndex</code>에서 중위 순회의 왼쪽 노드 수 <code class=\"language-text\">inorderIndex</code> - <code class=\"language-text\">inorderStartIndex</code> + 1를 더하면 구할 수 있다.)<br>\n6-3. 중위 순회 배열의 시작 인덱스는, 위에서 찾은 현재노드의 인덱스 다음 부터인 <code class=\"language-text\">inorderIndex</code> + 1을 전달하고,<br>\n6-4. 중위 순회 배열의 종료 인덱스는, 현재까지 종료 제한점인 <code class=\"language-text\">inorderEndIndex</code>를 전달한다.</p>\n<h3>Java 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructBinaryTreeFromPreorderAndInorderTraversal</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preorderIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inorderStartIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inorderEndIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preorderIndex <span class=\"token operator\">>=</span> preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> inorderStartIndex <span class=\"token operator\">></span> inorderEndIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span>preorderIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> inorderIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> inorderStartIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> inorderEndIndex<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        inorderIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preorderIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorderStartIndex<span class=\"token punctuation\">,</span> inorderIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">genTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preorderIndex <span class=\"token operator\">+</span> inorderIndex <span class=\"token operator\">-</span> inorderStartIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorderIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorderEndIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>코멘트</h1>\n<p>여기서의 핵심은, 추가적인 배열을 생성하는 것이 아닌 배열의 시작/종료 인덱스를 통해 최적화 할 수 있다는 것 입니다.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"문제"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal"},"children":[{"type":"text","value":"#105. Construct Binary Tree from Preorder and Inorder Traversal"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given preorder and inorder traversal of a tree, construct the binary tree."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Note: You may assume that duplicates do not exist in the tree."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Example 1."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Input: preorder = [3, 9, 20, 15, 7], inorder = [9, 3, 15, 20, 7]\nOutput: [3, 9, 20, null, null, 15, 7]"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"해법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"주어진 전위 순회(Preorder), 중위 순회(Inorder)의 특징을 이용하여 해결합니다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n전위 순회 배열을 "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"PRE"}]},{"type":"text","value":", 중위 순회 배열을 "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"IN"}]},{"type":"text","value":"이라고 하겠습니다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n전위 순회의 첫 요소 *PRE[0]*는 전위 순회 특징에 따라 루트값 입니다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n그리고 *PRE[0]*의 값이 중위 순회 배열 "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"IN"}]},{"type":"text","value":"중 *IN[7]*과 일치한다고 가정하겠습니다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n이때, 다음 두가지를 알 수 있습니다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"*PRE[0]*은 루트노드이다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"*IN[7]*을 기준으로 좌측 요소들("},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"IN[0]"}]},{"type":"text","value":" ~ "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"IN[6]"}]},{"type":"text","value":")은 중위 순회 특징에 따라 왼쪽 노드에 존재하며,"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"우측 요소들("},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"IN[8]"}]},{"type":"text","value":" ~ "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"IN[max]"}]},{"type":"text","value":")은 중위 순회 특징에 따라 오른쪽 노드에 존재한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"재귀를 통해 이를 반복하면 트리를 구할 수 있습니다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-resp-iframe-wrapper"],"style":"padding-bottom: 81.5126050420168%; position: relative; height: 0; overflow: hidden; margin-bottom: 1rem"},"children":[{"type":"text","value":" "},{"type":"element","tagName":"iframe","properties":{"src":"//www.slideshare.net/slideshow/embed_code/key/K6zd9TegpFlFG7","frameBorder":"0","marginWidth":0,"marginHeight":0,"scrolling":"no","style":"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ","allowFullScreen":true},"children":[{"type":"text","value":" "}]},{"type":"text","value":" "},{"type":"element","tagName":"div","properties":{"style":"margin-bottom:5px"},"children":[{"type":"text","value":" "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":" "},{"type":"element","tagName":"a","properties":{"href":"//www.slideshare.net/ssuser7b8f0f1/leetcode-105-construct-binary-tree-from-preorder-and-inorder-traversal","title":"[LeetCode] #105. Construct Binary Tree from Preorder and Inorder Traversal","target":"_blank"},"children":[{"type":"text","value":"[LeetCode] #105. Construct Binary Tree from Preorder and Inorder Traversal"}]},{"type":"text","value":" "}]},{"type":"text","value":" from "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.slideshare.net/ssuser7b8f0f1","target":"_blank"},"children":[{"type":"text","value":"Mingyu Kim"}]}]},{"type":"text","value":" "}]},{"type":"text","value":" "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"나의 해법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"성능"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"시간 복잡도 : "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"O(n)"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"공간 복잡도 : "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"O(n!)"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"해법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"재귀 호출을 통한 해법으로, 중위 순회값 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorder"}]},{"type":"text","value":"를 조정해 가며 트리를 구한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"genTree()"}]},{"type":"text","value":" 함수를 통해 전위 순회 배열 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorder"}]},{"type":"text","value":", 중위 순회 배열 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorder"}]},{"type":"text","value":" 값과 루트노드를 확인 할 수 있는 전위 순회의 인덱스 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":"를 받는다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":"가 전위 순회 배열 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorder"}]},{"type":"text","value":"의 사이즈를 넘어가면 null을 반환한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"루트노드의 값이 될 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"val"}]},{"type":"text","value":"을 구한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"루트노드의 값인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"val"}]},{"type":"text","value":"이 중위 순회 배열에서 어느 인덱스에 존재하는지 구하여 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":"에 할당한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"루트노드의 값 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"val"}]},{"type":"text","value":"이 현재 중위 순회 배열에 존재하지 않다면 (7) 혹은 (8)을 통한 다른쪽(왼쪽 혹은 오른쪽)에서 처리중이므로 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":" 값을\n증가시킨 결과를 반환한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n(이는 루트노드의 값이 중위 순회 배열에 값이 존재 할 때 까지 진행된다.)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"루트노드 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"를 할당한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"위에서 구한 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":"를 기준으로 중위 순회 배열의 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"왼쪽 배열"}]},{"type":"text","value":"들을 바탕으로 재귀 호출을 하고,\n얻은 결과를 현재 루트노드 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"의 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"왼쪽 자식노드"}]},{"type":"text","value":"로 할당한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"위에서 구한 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":"를 기준으로 중위 순회 배열의 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"오른쪽 배열"}]},{"type":"text","value":"들을 바탕으로 재귀 호출을 하고,\n얻은 결과를 현재 루트노드 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"의 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"오른쪽 자식노드"}]},{"type":"text","value":"로 할당한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"현재까지 구한 노드를 반환한다."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Java 코드"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ConstructBinaryTreeFromPreorderAndInorderTraversal"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"buildTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" preorderIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">="}]},{"type":"text","value":" preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"length"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" val "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"preorderIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"foundIndex"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" preorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" node "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" leftInorder "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Arrays"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"copyOfRange"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorderIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" leftNode "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" leftInorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" preorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"leftNode "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"!="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"left "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" leftNode"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" rightInorder "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Arrays"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"copyOfRange"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"length"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" rightNode "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" rightInorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" preorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"rightNode "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"!="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"right "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" rightNode"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"foundIndex"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" arr"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":" arr"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"length"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" i"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"arr"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"최적 해법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"성능"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"시간 복잡도 : "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"O(n)"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"공간 복잡도 : "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"O(n)"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"해법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"위에서 알아보았던 해법과 전반적인 흐름은 동일하지만 몇가지 최적화가 이루어 졌다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"추가적인 중위 순회 배열을 생성하지 않으며,"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"다음 루트노드를 바로 찾아가서 위의 (5)와 같은 로직이 불필요하고,"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"자식노드를 할당할 때 null 체크를 하지 않는다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n(자식노드에 null을 할당하여도 무방하기 때문이다.)"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"최적화가 이루어진 해법은 다음과 같다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"genTree()"}]},{"type":"text","value":" 함수를 통해 전위 순회 배열 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorder"}]},{"type":"text","value":", 중위 순회 배열 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorder"}]},{"type":"text","value":" 값과 루트노드를 확인 할 수 있는 전위 순회의 인덱스 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":"를 받으며,\n추가적인 중위 순회 배열을 생성하지 않기 위해 중위 순회 시작 인덱스 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderStartIndex"}]},{"type":"text","value":", 종료 인덱스 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderEndIndex"}]},{"type":"text","value":"를 받는다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":"가 전위 순회 배열 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorder"}]},{"type":"text","value":"의 사이즈를 넘어가거나, 중위 순회 인덱스가 유효하지 않으면 null을 반환한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"전위 순회 인덱스인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":"는 루트노드의 값을 가르키므로 해당 값을 바탕으로 루트노드 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"를 할당한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n(아래의 (6-2)를 통하여 루트노드를 바로 찾을 수 있다.)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"루트노드의 값을 중위 순회 배열에서 찾는다."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"4-1. 중위 순회 시작 인덱스 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderStartIndex"}]},{"type":"text","value":" 부터, 종료 인덱스 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderEndIndex"}]},{"type":"text","value":" 까지 순회한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n4-2. 중위 순회 배열에서 루트노드의 값과 동일한 인덱스를 찾으면 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":"에 할당하고 순회를 종료한다.\n5. 왼쪽 자식노드를 찾아 할당한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n5-1. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"genTree()"}]},{"type":"text","value":" 함수를 호출한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n5-2. 전위 순회 배열중 현재노드의 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"왼쪽 자식노드"}]},{"type":"text","value":"의 값은 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":" + 1 이고,"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n5-3. 중위 순회 배열의 시작 인덱스는, 현재까지 시작 제한점인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderStartIndex"}]},{"type":"text","value":"를 전달하고,"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n5-4. 중위 순회 배열의 종료 인덱스는, 위에서 찾은 현재노드의 인덱스 이전 까지인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":" - 1을 전달한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n6. 오른쪽 자식노드를 찾아 할당한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n6-1. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"genTree()"}]},{"type":"text","value":" 함수를 호출한다."},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n6-2. 전위 순회 배열중 현재노드의 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"오른쪽 자식노드"}]},{"type":"text","value":"의 값은 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":" + "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":" - "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderStartIndex"}]},{"type":"text","value":" + 1 이고,"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n(오른쪽 자식노드의 값은, 현재노드의 값인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preorderIndex"}]},{"type":"text","value":"에서 중위 순회의 왼쪽 노드 수 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":" - "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderStartIndex"}]},{"type":"text","value":" + 1를 더하면 구할 수 있다.)"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n6-3. 중위 순회 배열의 시작 인덱스는, 위에서 찾은 현재노드의 인덱스 다음 부터인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderIndex"}]},{"type":"text","value":" + 1을 전달하고,"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n6-4. 중위 순회 배열의 종료 인덱스는, 현재까지 종료 제한점인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"inorderEndIndex"}]},{"type":"text","value":"를 전달한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Java 코드"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ConstructBinaryTreeFromPreorderAndInorderTraversal"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"buildTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"length "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" preorderIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" inorderStartIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" inorderEndIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">="}]},{"type":"text","value":" preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"length "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"||"}]},{"type":"text","value":" inorderStartIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" inorderEndIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"text","value":" node "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"TreeNode"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"preorderIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" inorderStartIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<="}]},{"type":"text","value":" inorderEndIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" i"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"break"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n    node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"left "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" preorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorderStartIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"right "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"genTree"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"preorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorder"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" preorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" inorderStartIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorderIndex "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" inorderEndIndex"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"코멘트"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"여기서의 핵심은, 추가적인 배열을 생성하는 것이 아닌 배열의 시작/종료 인덱스를 통해 최적화 할 수 있다는 것 입니다."}]}],"data":{"quirksMode":false}},"excerpt":"문제 #105. Construct Binary Tree from Preorder and Inorder Traversal Given preorder and inorder traversal of a tree, construct the binary tree…","timeToRead":5,"frontmatter":{"template":"post","title":"[LeetCode] #105. Construct Binary Tree from Preorder and Inorder Traversal","userDate":"13 December 2020","date":"2020-12-13T17:33:51.000Z","tags":["leet_code","algorithm","medium_level","java","array","tree","depth_first_search","dfs"],"excerpt":"전위 순회, 중위 순회 값을 바탕으로 이진 트리를 구해봅니다.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}}},"relatedPosts":{"totalCount":10,"edges":[{"node":{"id":"ce19e5b8-7175-5ddd-bab2-e075cf83dbf3","timeToRead":5,"excerpt":"문제 #105. Construct Binary Tree from Preorder and Inorder Traversal Given preorder and inorder traversal of a tree, construct the binary tree…","frontmatter":{"title":"[LeetCode] #105. Construct Binary Tree from Preorder and Inorder Traversal","date":"2020-12-13T17:33:51.000Z"},"fields":{"slug":"/algorithm/leetcode/construct-binary-tree-from-preorder-and-inorder-traversal"}}},{"node":{"id":"aff0bd9e-ab1d-52a7-b59a-719e9fa2010b","timeToRead":6,"excerpt":"문제 #102. Binary Tree Level Order Traversal Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to…","frontmatter":{"title":"[LeetCode] #102. Binary Tree Level Order Traversal","date":"2020-12-13T06:16:58.000Z"},"fields":{"slug":"/algorithm/leetcode/binary-tree-level-order-traversal"}}},{"node":{"id":"d2e08fc6-f7b1-56be-85f5-bc4c485d17e4","timeToRead":4,"excerpt":"문제 #98. Validate Binary Search Tree Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is…","frontmatter":{"title":"[LeetCode] #98. Validate Binary Search Tree","date":"2020-12-10T08:04:21.000Z"},"fields":{"slug":"/algorithm/leetcode/validate-binary-search-tree"}}},{"node":{"id":"94dce10b-8561-596d-a7ab-5c89e26308a0","timeToRead":3,"excerpt":"문제 #91. Decode Ways A message containing letters from A-Z is being encoded to numbers using the following mapping: ‘A’ -> 1 ‘B’ -> 2 … ‘Z…","frontmatter":{"title":"[LeetCode] #91. Decode Ways","date":"2020-10-27T18:09:18.000Z"},"fields":{"slug":"/algorithm/leetcode/decode-ways"}}},{"node":{"id":"b99ab46e-0e70-5a3d-8fbd-e84e3340fab6","timeToRead":2,"excerpt":"문제 #79. Word Search Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of…","frontmatter":{"title":"[LeetCode] #79. Word Search","date":"2020-10-26T11:06:56.000Z"},"fields":{"slug":"/algorithm/leetcode/word-search"}}}]}},"pageContext":{"slug":"/algorithm/leetcode/construct-binary-tree-from-preorder-and-inorder-traversal","prev":{"excerpt":"문제 #102. Binary Tree Level Order Traversal Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to…","timeToRead":6,"frontmatter":{"template":"post","title":"[LeetCode] #102. Binary Tree Level Order Traversal","tags":["leet_code","algorithm","medium_level","java","tree","breadth_first_search","bfs"],"date":"2020-12-13T06:16:58.000Z","draft":false,"excerpt":"주어진 트리의 너비 우선 탐색(BFS)을 통해 레벨별로 묶은 노드의 값을 구해봅니다.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}},"fields":{"category":"algorithm","slug":"/algorithm/leetcode/binary-tree-level-order-traversal"}},"next":{"excerpt":"본 내용은 이펙티브 자바 3판(Joshua Bloch…","timeToRead":4,"frontmatter":{"template":"post","title":"[이펙티브 자바 3] 객체 생성과 파괴 | 생성자 대신 정적 팩터리 메서드를 고려하라","tags":["effective_java","java","creating_and_destroying_objects"],"date":"2021-01-05T08:28:47.000Z","draft":false,"excerpt":"생성자와 정적 팩토리 메소드를 비교 분석하고, 예시를 바탕으로 각각의 장/단점에 대해 알아봅니다.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b87868","images":{"fallback":{"src":"/static/3393fbd2a8b809fdb7a375e261636955/69eac/cover.jpg","srcSet":"/static/3393fbd2a8b809fdb7a375e261636955/706fa/cover.jpg 360w,\n/static/3393fbd2a8b809fdb7a375e261636955/f7872/cover.jpg 720w,\n/static/3393fbd2a8b809fdb7a375e261636955/69eac/cover.jpg 1440w","sizes":"(min-width: 1440px) 1440px, 100vw"},"sources":[{"srcSet":"/static/3393fbd2a8b809fdb7a375e261636955/22e2a/cover.webp 360w,\n/static/3393fbd2a8b809fdb7a375e261636955/4da88/cover.webp 720w,\n/static/3393fbd2a8b809fdb7a375e261636955/31706/cover.webp 1440w","type":"image/webp","sizes":"(min-width: 1440px) 1440px, 100vw"}]},"width":1440,"height":960}}}},"fields":{"category":"development","slug":"/development/etc/effective-java/item1-consider-static-factory-methods-instead-of-constructors"}},"primaryTag":"leet_code"}},"staticQueryHashes":["1144773313","288898337"]}