{"componentChunkName":"component---src-templates-category-tsx","path":"/algorithm/","result":{"data":{"allCategoryYaml":{"edges":[{"node":{"id":"be69cebd-e710-5095-8835-77e2298a1f32","description":"개발을 진행하며 궁금하거나, 어려웠던 점 혹은 팁 공유","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/d9f01768da90a6f71e7363da59371496/ea78d/development-cover.jpg","srcSet":"/static/d9f01768da90a6f71e7363da59371496/f6fcd/development-cover.jpg 320w,\n/static/d9f01768da90a6f71e7363da59371496/518ce/development-cover.jpg 640w,\n/static/d9f01768da90a6f71e7363da59371496/ea78d/development-cover.jpg 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[{"srcSet":"/static/d9f01768da90a6f71e7363da59371496/dde70/development-cover.webp 320w,\n/static/d9f01768da90a6f71e7363da59371496/3c1b2/development-cover.webp 640w,\n/static/d9f01768da90a6f71e7363da59371496/f5c3c/development-cover.webp 1280w","type":"image/webp","sizes":"(min-width: 1280px) 1280px, 100vw"}]},"width":1440,"height":956.25}}}}},{"node":{"id":"e5ac12c1-c8b6-550e-b2f7-7ac06db94123","description":"알고리즘 문제 풀이 및 팁 공유","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/7c059598688e3fd026dab3857225bb51/7f99f/algorithm-cover.jpg","srcSet":"/static/7c059598688e3fd026dab3857225bb51/3b635/algorithm-cover.jpg 360w,\n/static/7c059598688e3fd026dab3857225bb51/9007f/algorithm-cover.jpg 720w,\n/static/7c059598688e3fd026dab3857225bb51/7f99f/algorithm-cover.jpg 1440w","sizes":"(min-width: 1440px) 1440px, 100vw"},"sources":[{"srcSet":"/static/7c059598688e3fd026dab3857225bb51/25350/algorithm-cover.webp 360w,\n/static/7c059598688e3fd026dab3857225bb51/110ca/algorithm-cover.webp 720w,\n/static/7c059598688e3fd026dab3857225bb51/8ff83/algorithm-cover.webp 1440w","type":"image/webp","sizes":"(min-width: 1440px) 1440px, 100vw"}]},"width":1440,"height":810}}}}}]},"allMarkdownRemark":{"totalCount":10,"edges":[{"node":{"excerpt":"문제 #105. Construct Binary Tree from Preorder and Inorder Traversal Given preorder and inorder traversal of a tree, construct the binary tree…","timeToRead":4,"frontmatter":{"title":"[LeetCode] #105. Construct Binary Tree from Preorder and Inorder Traversal","excerpt":"전위 순회, 중위 순회 값을 바탕으로 이진 트리를 구해봅니다.","tags":["leet_code","algorithm","medium_level","java","array","tree","depth_first_search","dfs"],"date":"2020-12-13T17:33:51.000Z","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}},"fields":{"slug":"/algorithm/leetcode/construct-binary-tree-from-preorder-and-inorder-traversal"}}},{"node":{"excerpt":"문제 #102. Binary Tree Level Order Traversal Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to…","timeToRead":4,"frontmatter":{"title":"[LeetCode] #102. Binary Tree Level Order Traversal","excerpt":"주어진 트리의 너비 우선 탐색(BFS)을 통해 레벨별로 묶은 노드의 값을 구해봅니다.","tags":["leet_code","algorithm","medium_level","java","tree","breadth_first_search","bfs"],"date":"2020-12-13T06:16:58.000Z","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}},"fields":{"slug":"/algorithm/leetcode/binary-tree-level-order-traversal"}}},{"node":{"excerpt":"문제 #98. Validate Binary Search Tree Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is…","timeToRead":3,"frontmatter":{"title":"[LeetCode] #98. Validate Binary Search Tree","excerpt":"주어진 트리가 올바른 이진 탐색 트리인지 확인합니다.","tags":["leet_code","algorithm","medium_level","java","tree","depth_first_search","binary_search_tree","bst"],"date":"2020-12-10T08:04:21.000Z","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}},"fields":{"slug":"/algorithm/leetcode/validate-binary-search-tree"}}},{"node":{"excerpt":"문제 #91. Decode Ways A message containing letters from A-Z is being encoded to numbers using the following mapping: ‘A’ -> 1 ‘B’ -> 2 … ‘Z…","timeToRead":3,"frontmatter":{"title":"[LeetCode] #91. Decode Ways","excerpt":"디코딩 가능한 모든 경우의 수를 구해봅니다.","tags":["leet_code","algorithm","medium_level","java","string","dynamic_programming"],"date":"2020-10-27T18:09:18.000Z","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}},"fields":{"slug":"/algorithm/leetcode/decode-ways"}}},{"node":{"excerpt":"문제 #79. Word Search Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of…","timeToRead":2,"frontmatter":{"title":"[LeetCode] #79. Word Search","excerpt":"주어진 단어가 2차원 배열에 연속적으로 인접하여 존재하는지 확인합니다.","tags":["leet_code","algorithm","medium_level","java","array","backtracking"],"date":"2020-10-26T11:06:56.000Z","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}},"fields":{"slug":"/algorithm/leetcode/word-search"}}},{"node":{"excerpt":"문제 #78. Subsets Given a set of distinct integers, nums, return all possible subsets (the power set). Note: The solution set must not contain…","timeToRead":2,"frontmatter":{"title":"[LeetCode] #78. Subsets","excerpt":"중복없는 집합 요소에서 가능한 모든 조합을 구해봅니다.","tags":["leet_code","algorithm","medium_level","java","array","backtracking","bit_manipulation"],"date":"2020-10-21T20:15:36.000Z","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg","srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/8963f/cover.jpg 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/160a8/cover.jpg 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/2a492/cover.jpg 1000w","sizes":"(min-width: 1000px) 1000px, 100vw"},"sources":[{"srcSet":"/static/2ec0ede8ee2d9260970a53f04a04b8c3/e175a/cover.webp 250w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/14517/cover.webp 500w,\n/static/2ec0ede8ee2d9260970a53f04a04b8c3/7592a/cover.webp 1000w","type":"image/webp","sizes":"(min-width: 1000px) 1000px, 100vw"}]},"width":1440,"height":604.8}}}},"fields":{"slug":"/algorithm/leetcode/subsets"}}}]}},"pageContext":{"limit":6,"skip":0,"currentPage":1,"numPages":2,"pathPrefix":"/algorithm","category":"algorithm"}},"staticQueryHashes":["1144773313","288898337"],"slicesMap":{}}