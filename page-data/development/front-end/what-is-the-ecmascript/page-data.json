{"componentChunkName":"component---src-templates-post-tsx","path":"/development/front-end/what-is-the-ecmascript","result":{"data":{"logo":null,"markdownRemark":{"html":"<h1>ES6은 뭐고 ES2015는 뭐야?!</h1>\n<p>가끔씩 볼때마다 헷갈리는 ECMAScript 버전!! 도대체 어떻게 버전관리를 하는거야 ㅠㅠ.\n다음부터 헷갈리지 않게 한번 정리해놔야겠다.</p>\n<h1>자바스크립트(JavaScript) 잘 알고있니?</h1>\n<p>ECMAScript를 알기전에 우선 친숙한 자바스크립트에 대해 알아보자.</p>\n<p>우리(내게)에게 친숙한 자바스크립트는 웹브라우저(클라이언트)에서 멀고먼 서버에 데이터를 보내기 전, 데이터 유효성 검사 등을 처리하는 스크립트 언어였다. 이 자바스크립트는 1995년 넷스케이프(Netscape)의 Brendan Eich에 의해 개발된 언어이고, Mocha -> LiveScript -> JavaScript의 네이밍 변천사를 갖고있는 아이이다. 그리고 사실 우리가 알던 자바스크립트는 <code class=\"language-text\">ECMAScript</code> + <code class=\"language-text\">BOM(Browser Object Model)</code> + <code class=\"language-text\">DOM(Document Object Model)</code>라는 1개의 코어와 2개의 모델로 이루어져있다는 것만 인지하고 있자.</p>\n<h1>ECMAScript란?</h1>\n<p>그렇다면! 다시 본론으로 돌아가서 ECMAScript(이하 ES)란 무엇인가?</p>\n<p>ES는 자바스크립트를 이루는 코어(Core)스크립트 언어로써, 다양한 환경에서 운용될 수 있게 확장성을 갖고 있기때문에 사용처가 웹환경으로 국한되어있지는 않다. 즉 위에서 말한 우리가 아는 자바스크립트는 웹브라우저에서 돌아갈 수 있도록 <code class=\"language-text\">BOM</code> 과 <code class=\"language-text\">DOM</code>을 함께 사용하는 확장성이 되겠다. 이러한 확장성들은 ES 버전에 따른 문법과 기능의 확장을 가능하게 한다.</p>\n<h1>그렇다면 ES의 버전관리는 어떻게 되는거야?</h1>\n<p>ES는 다음과 같은 버전 히스토리를 갖고있다.</p>\n<p><code class=\"language-text\">ES3</code> -> <code class=\"language-text\">ES5</code> -> <code class=\"language-text\">ES6</code>(ES2015) -> <code class=\"language-text\">ES7</code>(ES2016)</p>\n<p>뭐야…! 헷갈리게 넘버링과 년도가 따로있네, 그렇다 ES5 != ES2015 였던 것이다. 그렇다면 각 버전에 대해 좀더 자세히 알아보자.</p>\n<h2>ES3 (1999)</h2>\n<p>대중적으로 알고있는 그냥 자바스크립트라고 보면 된다.\n<code class=\"language-text\">함수 단위의 스코프</code>, <code class=\"language-text\">호이스팅</code>, <code class=\"language-text\">클로저</code>, <code class=\"language-text\">프로토타입</code> 등… 우리가 익히 알고있는 자바스크립트의 기본적인 특징들을 갖고있다. 대부분의 브라우저에서 지원하며, IE8까지 크로스브라우징을 지원하는 환경이라면 <code class=\"language-text\">ES3</code>을 쓰고 있다고 보면 된다.</p>\n<h2>ES5 (2009)</h2>\n<p>ES4는 너무 시대의 흐름을 앞서갔는지 거절되고, 그 후에 점진적인 개선을 목표로 ES5가 나왔다고 한다. 아무리 그래도 10년만에 버전업이라니 너무한것 같지만 ㅁ낳은 편리한 기능이 추가되었다.</p>\n<ul>\n<li>배열</li>\n</ul>\n<p>배열과 관련하여 편리한 메소드들이 다수 생겼다. <code class=\"language-text\">forEach</code>, <code class=\"language-text\">map</code>, <code class=\"language-text\">reduce</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">some</code>, <code class=\"language-text\">every</code>와 같은 순환 메소드들이 생겼다. 이 메소드들은 개발 시 불필요한 중복 코드를 줄여주어서 가독성은 높이고 버그율은 낮추는 효과가 있다.</p>\n<ul>\n<li>객체</li>\n</ul>\n<p>객체는 프로퍼티에 대한 설정을 할 수 있게 되었다. 객체를 생성, 수정, 복사하는 표준 메소드 <code class=\"language-text\">Object.Create()</code>, <code class=\"language-text\">Object.defineProperty()</code>, <code class=\"language-text\">Object.freeze()</code>, <code class=\"language-text\">Object.assign()</code> 등 과 <code class=\"language-text\">getter</code>, <code class=\"language-text\">setter</code> 등이 추가되었으며, <code class=\"language-text\">Object.keys()</code> 메소드를 이용하면 for in 메소드도 대체할 수 있게 되었다.</p>\n<ul>\n<li>strict 모드</li>\n</ul>\n<p>문법을 좀 더 깐깐하게 체크하는 모드이다. 너무 자유분방하였던 기존 ES를 안전하고, <code class=\"language-text\">개발자가 인지할 수 있는 범위 안에서</code> 개발할 수 있도록 사용하기 위해 등장했다. <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode - JavaScript | MDN</a>에서 자세한 특징을 확인 할 수 있다.</p>\n<ul>\n<li>bind() 메소드</li>\n</ul>\n<p>this를 강제로 바인딩 시켜주는 메소드이다. 좀 더 명확하게 this 스코프를 지정 할 수 있게 되었다.</p>\n<h2>ES6 (ES2015)</h2>\n<p>ES6보다 ES2015라고 많이 불리우며, ES6 Harmony라고도 불리운다고 한다. ES2015에서 다음과 같은 문제점들이 해결되었다.</p>\n<ul>\n<li>호이스팅이 사라진 것 같은 효과</li>\n<li>함수 단위 스코프에서 블록 단위 스코프로 변경</li>\n<li>this를 동적으로 바인딩하지 않는 화살표 함수</li>\n<li>모듈화 지원</li>\n<li>콜백 지옥에서 구원해줄 Promise</li>\n<li>Default, Rest 파라미터</li>\n<li>해체 할당, Spread 연산자</li>\n<li>템플릿 리터럴</li>\n<li>클래스</li>\n</ul>\n<p>이 외에도 추가된점이 너무 많아서 이부분에서 사람들이 진입장벽을 느끼는 것 같다.\n브라우저(특히 MS 계열)에서 지원해주지 않는 경우가 많아 <code class=\"language-text\">바벨(Babel)</code>이라는 트랜스파일러를 써야하는데 이 바벨은 웹브라우저가 아닌 <code class=\"language-text\">Node.js</code> 위에서 돌아가고… Node.js를 설치하려면 <code class=\"language-text\">NPM</code>을 알아야하고… 또 모듈화를 사용하려면 <code class=\"language-text\">웹팩(WebPack)</code>같은 모듈 번들러를 알아야하고…</p>\n<p>이런 다양한 장벽 때문에 사람들이 ES2015를 쉽게 접근하지 못하는 경향이 있는 것 같다.\n하지만 우리는 언제나처럼 도전할 것이다!</p>\n<h2>ES7 (ES2016)</h2>\n<p>이번에는 다행히? ES2015때처럼 큰 변화는 없었다. 비교하자면 ES2015의 1/10 정도도 안되는 분량? 휴.. 다행이다.</p>\n<ul>\n<li>제곱 연산자(**) 등장</li>\n<li>Array.includes 배열에 해당 요소가 존재하는지 확인하는 메소드 등장</li>\n</ul>\n<h2>ES8 (ES2017)</h2>\n<p>ES2017에서는 Promise 급의 중대한 변화인 <code class=\"language-text\">async</code>, <code class=\"language-text\">await</code>등이 발표되었습니다!</p>\n<ul>\n<li>async</li>\n<li>await</li>\n<li>객체</li>\n</ul>\n<p>객체의 좀더 심화된 메소드가 등장했습니다. Object.keys()에 대응되는 메소드인 <code class=\"language-text\">Object.values()</code>, Object.keys()와 Object.values()를 합쳐 놓은 <code class=\"language-text\">Object.entries()</code>, Object.getOwnPropertyDescriptor의 복수 형태인 <code class=\"language-text\">Object.getOwnPropertDescriptors()</code>로써 상속받지 않은 속성들의 설명만 보여줍니다.</p>\n<ul>\n<li>문자열</li>\n</ul>\n<p>단순 편의기능이 추가되었습니다. 문자열 앞부분에 공백을 넣어 자리수를 맞춰주는 <code class=\"language-text\">String.padStart()</code>, 문자열 뒷부분에 공백을 넣어 자리수를 맞춰주는 <code class=\"language-text\">String.padEnd()</code></p>\n<ul>\n<li>매개변수 마지막에 콤마를 붙이는걸 허용</li>\n</ul>\n<h1>이제 좀 명쾌하네~!</h1>\n<p>ES3에서 ES5까지 10년, ES6까지 7년의 공백 때문에 많은 변화가 있었는데, 앞으로 매년 표준을 제정하며 그런 혼란을 줄일 예정인 것 같다. 또한 이후에 나올 ES를 통칭해서 ES.Next라고 부른다. 다음 ES9(ES2018)은 어떨까..?\n이번에는 전반적인 ES에 대해 알아보느라 메소드 하나하나 자세히 알아보지는 못한것 같다. 다음 시간에는 각 메소드를 자세히 알아보도록 하자.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"ES6은 뭐고 ES2015는 뭐야?!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"가끔씩 볼때마다 헷갈리는 ECMAScript 버전!! 도대체 어떻게 버전관리를 하는거야 ㅠㅠ.\n다음부터 헷갈리지 않게 한번 정리해놔야겠다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"자바스크립트(JavaScript) 잘 알고있니?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ECMAScript를 알기전에 우선 친숙한 자바스크립트에 대해 알아보자."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"우리(내게)에게 친숙한 자바스크립트는 웹브라우저(클라이언트)에서 멀고먼 서버에 데이터를 보내기 전, 데이터 유효성 검사 등을 처리하는 스크립트 언어였다. 이 자바스크립트는 1995년 넷스케이프(Netscape)의 Brendan Eich에 의해 개발된 언어이고, Mocha -> LiveScript -> JavaScript의 네이밍 변천사를 갖고있는 아이이다. 그리고 사실 우리가 알던 자바스크립트는 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ECMAScript"}]},{"type":"text","value":" + "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BOM(Browser Object Model)"}]},{"type":"text","value":" + "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DOM(Document Object Model)"}]},{"type":"text","value":"라는 1개의 코어와 2개의 모델로 이루어져있다는 것만 인지하고 있자."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"ECMAScript란?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"그렇다면! 다시 본론으로 돌아가서 ECMAScript(이하 ES)란 무엇인가?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ES는 자바스크립트를 이루는 코어(Core)스크립트 언어로써, 다양한 환경에서 운용될 수 있게 확장성을 갖고 있기때문에 사용처가 웹환경으로 국한되어있지는 않다. 즉 위에서 말한 우리가 아는 자바스크립트는 웹브라우저에서 돌아갈 수 있도록 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BOM"}]},{"type":"text","value":" 과 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DOM"}]},{"type":"text","value":"을 함께 사용하는 확장성이 되겠다. 이러한 확장성들은 ES 버전에 따른 문법과 기능의 확장을 가능하게 한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"그렇다면 ES의 버전관리는 어떻게 되는거야?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ES는 다음과 같은 버전 히스토리를 갖고있다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ES3"}]},{"type":"text","value":" -> "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ES5"}]},{"type":"text","value":" -> "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ES6"}]},{"type":"text","value":"(ES2015) -> "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ES7"}]},{"type":"text","value":"(ES2016)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"뭐야…! 헷갈리게 넘버링과 년도가 따로있네, 그렇다 ES5 != ES2015 였던 것이다. 그렇다면 각 버전에 대해 좀더 자세히 알아보자."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ES3 (1999)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"대중적으로 알고있는 그냥 자바스크립트라고 보면 된다.\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"함수 단위의 스코프"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"호이스팅"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"클로저"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"프로토타입"}]},{"type":"text","value":" 등… 우리가 익히 알고있는 자바스크립트의 기본적인 특징들을 갖고있다. 대부분의 브라우저에서 지원하며, IE8까지 크로스브라우징을 지원하는 환경이라면 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ES3"}]},{"type":"text","value":"을 쓰고 있다고 보면 된다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ES5 (2009)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ES4는 너무 시대의 흐름을 앞서갔는지 거절되고, 그 후에 점진적인 개선을 목표로 ES5가 나왔다고 한다. 아무리 그래도 10년만에 버전업이라니 너무한것 같지만 ㅁ낳은 편리한 기능이 추가되었다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"배열"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"배열과 관련하여 편리한 메소드들이 다수 생겼다. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"forEach"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"map"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"reduce"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"filter"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"some"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"every"}]},{"type":"text","value":"와 같은 순환 메소드들이 생겼다. 이 메소드들은 개발 시 불필요한 중복 코드를 줄여주어서 가독성은 높이고 버그율은 낮추는 효과가 있다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"객체"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"객체는 프로퍼티에 대한 설정을 할 수 있게 되었다. 객체를 생성, 수정, 복사하는 표준 메소드 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.Create()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.defineProperty()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.freeze()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.assign()"}]},{"type":"text","value":" 등 과 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getter"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"setter"}]},{"type":"text","value":" 등이 추가되었으며, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.keys()"}]},{"type":"text","value":" 메소드를 이용하면 for in 메소드도 대체할 수 있게 되었다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"strict 모드"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"문법을 좀 더 깐깐하게 체크하는 모드이다. 너무 자유분방하였던 기존 ES를 안전하고, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"개발자가 인지할 수 있는 범위 안에서"}]},{"type":"text","value":" 개발할 수 있도록 사용하기 위해 등장했다. "},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode"},"children":[{"type":"text","value":"Strict mode - JavaScript | MDN"}]},{"type":"text","value":"에서 자세한 특징을 확인 할 수 있다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"bind() 메소드"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"this를 강제로 바인딩 시켜주는 메소드이다. 좀 더 명확하게 this 스코프를 지정 할 수 있게 되었다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ES6 (ES2015)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ES6보다 ES2015라고 많이 불리우며, ES6 Harmony라고도 불리운다고 한다. ES2015에서 다음과 같은 문제점들이 해결되었다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"호이스팅이 사라진 것 같은 효과"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"함수 단위 스코프에서 블록 단위 스코프로 변경"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"this를 동적으로 바인딩하지 않는 화살표 함수"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"모듈화 지원"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"콜백 지옥에서 구원해줄 Promise"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Default, Rest 파라미터"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"해체 할당, Spread 연산자"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"템플릿 리터럴"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"클래스"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 외에도 추가된점이 너무 많아서 이부분에서 사람들이 진입장벽을 느끼는 것 같다.\n브라우저(특히 MS 계열)에서 지원해주지 않는 경우가 많아 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"바벨(Babel)"}]},{"type":"text","value":"이라는 트랜스파일러를 써야하는데 이 바벨은 웹브라우저가 아닌 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Node.js"}]},{"type":"text","value":" 위에서 돌아가고… Node.js를 설치하려면 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"NPM"}]},{"type":"text","value":"을 알아야하고… 또 모듈화를 사용하려면 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"웹팩(WebPack)"}]},{"type":"text","value":"같은 모듈 번들러를 알아야하고…"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이런 다양한 장벽 때문에 사람들이 ES2015를 쉽게 접근하지 못하는 경향이 있는 것 같다.\n하지만 우리는 언제나처럼 도전할 것이다!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ES7 (ES2016)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이번에는 다행히? ES2015때처럼 큰 변화는 없었다. 비교하자면 ES2015의 1/10 정도도 안되는 분량? 휴.. 다행이다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"제곱 연산자(**) 등장"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Array.includes 배열에 해당 요소가 존재하는지 확인하는 메소드 등장"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ES8 (ES2017)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ES2017에서는 Promise 급의 중대한 변화인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"async"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"await"}]},{"type":"text","value":"등이 발표되었습니다!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"async"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"await"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"객체"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"객체의 좀더 심화된 메소드가 등장했습니다. Object.keys()에 대응되는 메소드인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.values()"}]},{"type":"text","value":", Object.keys()와 Object.values()를 합쳐 놓은 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.entries()"}]},{"type":"text","value":", Object.getOwnPropertyDescriptor의 복수 형태인 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object.getOwnPropertDescriptors()"}]},{"type":"text","value":"로써 상속받지 않은 속성들의 설명만 보여줍니다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"문자열"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"단순 편의기능이 추가되었습니다. 문자열 앞부분에 공백을 넣어 자리수를 맞춰주는 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String.padStart()"}]},{"type":"text","value":", 문자열 뒷부분에 공백을 넣어 자리수를 맞춰주는 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String.padEnd()"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"매개변수 마지막에 콤마를 붙이는걸 허용"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"이제 좀 명쾌하네~!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ES3에서 ES5까지 10년, ES6까지 7년의 공백 때문에 많은 변화가 있었는데, 앞으로 매년 표준을 제정하며 그런 혼란을 줄일 예정인 것 같다. 또한 이후에 나올 ES를 통칭해서 ES.Next라고 부른다. 다음 ES9(ES2018)은 어떨까..?\n이번에는 전반적인 ES에 대해 알아보느라 메소드 하나하나 자세히 알아보지는 못한것 같다. 다음 시간에는 각 메소드를 자세히 알아보도록 하자."}]}],"data":{"quirksMode":false}},"excerpt":"ES6은 뭐고 ES2015는 뭐야?! 가끔씩 볼때마다 헷갈리는 ECMAScript 버전!! 도대체 어떻게 버전관리를 하는거야 ㅠㅠ.\n다음부터 헷갈리지 않게 한번 정리해놔야겠다. 자바스크립트(JavaScript) 잘 알고있니? ECMAScript…","timeToRead":3,"frontmatter":{"template":"post","title":"ES6?! ES2015?! ECMAScript란 도대체 무엇인가?","userDate":"7 February 2018","date":"2018-02-07T11:30:04.000Z","tags":["javascript","js","ecmascript","es5","es6","es2015","es2016"],"excerpt":"Javascript의 버전 정보에 대해 알아봅니다.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8e808","images":{"fallback":{"src":"/static/3ef3de5ee4d601183a788cf9aae66125/9ac5e/javascript-history.png","srcSet":"/static/3ef3de5ee4d601183a788cf9aae66125/2604c/javascript-history.png 360w,\n/static/3ef3de5ee4d601183a788cf9aae66125/45bd8/javascript-history.png 720w,\n/static/3ef3de5ee4d601183a788cf9aae66125/9ac5e/javascript-history.png 1440w","sizes":"(min-width: 1440px) 1440px, 100vw"},"sources":[{"srcSet":"/static/3ef3de5ee4d601183a788cf9aae66125/294ee/javascript-history.webp 360w,\n/static/3ef3de5ee4d601183a788cf9aae66125/618b3/javascript-history.webp 720w,\n/static/3ef3de5ee4d601183a788cf9aae66125/14409/javascript-history.webp 1440w","type":"image/webp","sizes":"(min-width: 1440px) 1440px, 100vw"}]},"width":1440,"height":808}}}}},"relatedPosts":{"totalCount":1,"edges":[{"node":{"id":"1043a990-6e0f-5adf-b49f-05724ef38a32","timeToRead":3,"excerpt":"ES6은 뭐고 ES2015는 뭐야?! 가끔씩 볼때마다 헷갈리는 ECMAScript 버전!! 도대체 어떻게 버전관리를 하는거야 ㅠㅠ.\n다음부터 헷갈리지 않게 한번 정리해놔야겠다. 자바스크립트(JavaScript) 잘 알고있니? ECMAScript…","frontmatter":{"title":"ES6?! ES2015?! ECMAScript란 도대체 무엇인가?","date":"2018-02-07T11:30:04.000Z"},"fields":{"slug":"/development/front-end/what-is-the-ecmascript"}}}]}},"pageContext":{"slug":"/development/front-end/what-is-the-ecmascript","prev":{"excerpt":"개요 이 포스팅에서는 JDK 8 설치 및 환경설정하는 방법에 대해 소개하고자 합니다.  JDK 다운로드 JDK 다운로드를 클릭하여 JDK를 다운로드 하거나, 혹은 다음 절차를 따라 다운로드 한다. Oracle…","timeToRead":3,"frontmatter":{"template":"post","title":"윈도우에서 JDK 8 설치 및 환경설정","tags":["jdk","jdk8","windows"],"date":"2018-01-28T06:53:25.000Z","draft":false,"excerpt":"윈도우에서 Java 개발을 위한 JDK 8 설치 방법을 알아봅니다.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/805a4e61e13c77cf64b8807ee13c1e7b/cccab/cover.jpg","srcSet":"/static/805a4e61e13c77cf64b8807ee13c1e7b/579a8/cover.jpg 320w,\n/static/805a4e61e13c77cf64b8807ee13c1e7b/dc962/cover.jpg 640w,\n/static/805a4e61e13c77cf64b8807ee13c1e7b/cccab/cover.jpg 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[{"srcSet":"/static/805a4e61e13c77cf64b8807ee13c1e7b/0b98c/cover.webp 320w,\n/static/805a4e61e13c77cf64b8807ee13c1e7b/cb99c/cover.webp 640w,\n/static/805a4e61e13c77cf64b8807ee13c1e7b/222e4/cover.webp 1280w","type":"image/webp","sizes":"(min-width: 1280px) 1280px, 100vw"}]},"width":1440,"height":707.625}}}},"fields":{"category":"development","slug":"/development/etc/install-jdk-with-setting-at-windows"}},"next":{"excerpt":"Vue CLI란? Vue CLI는 커멘드라인 인터페이스 기반의 Vue 프로젝트 생성 도구이며, 사용자가 어플리케이션 개발에 집중할 수 있도록 프로젝트 구성을 도와준다. Vue CLI…","timeToRead":2,"frontmatter":{"template":"post","title":"Vue.js 사용하기","tags":["vuejs","vue_cli_3","frontend"],"date":"2019-09-09T01:20:55.000Z","draft":false,"excerpt":"VieJS 기본 프로젝트를 생성하는 방법을 알아봅니다.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/48f035a6f1288de74f4ed234a0bc8226/f5af6/cover.png","srcSet":"/static/48f035a6f1288de74f4ed234a0bc8226/19654/cover.png 163w,\n/static/48f035a6f1288de74f4ed234a0bc8226/a003f/cover.png 326w,\n/static/48f035a6f1288de74f4ed234a0bc8226/f5af6/cover.png 652w","sizes":"(min-width: 652px) 652px, 100vw"},"sources":[{"srcSet":"/static/48f035a6f1288de74f4ed234a0bc8226/d8ae8/cover.webp 163w,\n/static/48f035a6f1288de74f4ed234a0bc8226/c3014/cover.webp 326w,\n/static/48f035a6f1288de74f4ed234a0bc8226/d4090/cover.webp 652w","type":"image/webp","sizes":"(min-width: 652px) 652px, 100vw"}]},"width":1440,"height":1064.5398773006134}}}},"fields":{"category":"development","slug":"/development/front-end/create-vuejs"}},"primaryTag":"javascript"}},"staticQueryHashes":["1144773313","288898337"]}