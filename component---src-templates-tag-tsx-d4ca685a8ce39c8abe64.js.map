{"version":3,"file":"component---src-templates-tag-tsx-d4ca685a8ce39c8abe64.js","mappings":"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","sources":["webpack://devdave/./src/components/header/HeadOfTitle.tsx","webpack://devdave/./src/components/header/MetaHeadOfTitle.tsx","webpack://devdave/./src/components/header/TagMetaHeadOfTitle.tsx","webpack://devdave/./src/templates/tag.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  inner,\n  outer,\n  ResponsiveHeaderBackground,\n  SiteArchiveHeader,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderBackground,\n  SiteHeaderContent,\n  SiteNavMain,\n  SiteTitle,\n} from '../../styles/shared';\nimport SiteNav from './SiteNav';\n\ninterface Props {\n  backgroundImageSrc?: string;\n  title: string;\n  subTitle: string;\n}\n\nconst HeadOfTitle: React.FC<Props> = ({ backgroundImageSrc, title, subTitle }) => {\n  return (\n    <header\n      className=\"site-archive-header\"\n      css={[SiteHeader, SiteArchiveHeader]}\n    >\n      <div css={[outer, SiteNavMain]}>\n        <div css={inner}>\n          <SiteNav isHome={false} />\n        </div>\n      </div>\n      <ResponsiveHeaderBackground\n        css={[outer, SiteHeaderBackground]}\n        backgroundImage={backgroundImageSrc}\n        className=\"site-header-background\"\n      >\n        <SiteHeaderContent css={inner} className=\"site-header-content\">\n          <SiteTitle className=\"site-title\">{title}</SiteTitle>\n          <SiteDescription className=\"site-description\">{subTitle}</SiteDescription>\n        </SiteHeaderContent>\n      </ResponsiveHeaderBackground>\n    </header>\n  );\n};\n\nexport default HeadOfTitle;\n","import React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PageContext } from '../../templates/post';\nimport HeadOfTitle from './HeadOfTitle';\n\ninterface Props {\n  title?: string;\n  edges: Array<{\n    node: {\n      id: string;\n      description: string;\n      image?: {\n        childImageSharp: {\n          gatsbyImageData: IGatsbyImageData;\n        };\n      };\n    };\n  }>;\n  allMarkdownRemark: {\n    totalCount: number;\n    edges: Array<{\n      node: PageContext;\n    }>;\n  };\n}\n\nconst MetaHeadOfTitle: React.FC<Props> = ({ title = '', edges, allMarkdownRemark }) => {\n  const metaData = edges.find(\n    n => n.node.id.toLowerCase() === title.toLowerCase(),\n  );\n\n  const { totalCount } = allMarkdownRemark;\n  const postsCount = (totalCount > 0) ? totalCount : 'No';\n  const postNoun = (totalCount === 1) ? 'post' : 'posts';\n  const subTitle = metaData?.node.description || `A collection of ${postsCount} ${postNoun}`;\n\n  return (\n    <HeadOfTitle\n      backgroundImageSrc={metaData?.node?.image?.childImageSharp?.gatsbyImageData.images.fallback?.src}\n      title={title}\n      subTitle={subTitle}\n    />\n  );\n};\n\nexport default MetaHeadOfTitle;\n","import React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PageContext } from '../../templates/post';\nimport MetaHeadOfTitle from './MetaHeadOfTitle';\n\ninterface Props {\n  tag?: string;\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              gatsbyImageData: IGatsbyImageData;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst CategoryMetaHeadOfTitle: React.FC<Props> = ({ tag = '', data }) => {\n  return (\n    <MetaHeadOfTitle\n      title={tag}\n      edges={data.allTagYaml.edges}\n      allMarkdownRemark={data.allMarkdownRemark} />\n  );\n};\n\nexport default CategoryMetaHeadOfTitle;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport { Footer } from '../components/Footer';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { inner, outer, PostFeed, SiteMain } from '../styles/shared';\nimport { PageContext } from './post';\nimport config from '../website-config';\nimport TagMetaHeadOfTitle from '../components/header/TagMetaHeadOfTitle';\n\ninterface TagTemplateProps {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              gatsbyImageData: IGatsbyImageData;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Tag = ({ pageContext, data }: TagTemplateProps) => {\n  const { edges } = data.allMarkdownRemark;\n\n  return (\n    <IndexLayout>\n      <Wrapper>\n        <TagMetaHeadOfTitle\n          tag={pageContext.tag}\n          data={data}\n        />\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={PostFeed}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tag;\n\nexport function Head({ pageContext, data, location }: TagTemplateProps) {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <>\n      <title>\n        {tag} - {config.title}\n      </title>\n      <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n      <meta property=\"og:site_name\" content={config.title} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n      <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n      {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n      <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n      {config.twitter && (\n        <meta\n          name=\"twitter:site\"\n          content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n        />\n      )}\n    </>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(\n                layout: CONSTRAINED\n                width: 1440\n              )\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 1440\n                )\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["HeadOfTitle","backgroundImageSrc","title","subTitle","___EmotionJSX","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","SiteNav","isHome","ResponsiveHeaderBackground","SiteHeaderBackground","backgroundImage","SiteHeaderContent","SiteTitle","SiteDescription","MetaHeadOfTitle","edges","allMarkdownRemark","_metaData$node","_metaData$node$image","_metaData$node$image$","_metaData$node$image$2","metaData","find","n","node","id","toLowerCase","totalCount","postsCount","postNoun","description","image","childImageSharp","gatsbyImageData","images","fallback","src","CategoryMetaHeadOfTitle","tag","data","allTagYaml","Tag","pageContext","IndexLayout","Wrapper","TagMetaHeadOfTitle","SiteMain","PostFeed","map","PostCard","key","fields","slug","post","Footer","Head","location","tagData","React","config","name","content","property","siteUrl","pathname","facebook","twitter","split"],"sourceRoot":""}