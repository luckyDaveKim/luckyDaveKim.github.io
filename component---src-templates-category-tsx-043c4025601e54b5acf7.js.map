{"version":3,"file":"component---src-templates-category-tsx-043c4025601e54b5acf7.js","mappings":"+IA8CA,IAzBqC,IAA6C,IAA5C,mBAAEA,EAAF,MAAsBC,EAAtB,SAA6BC,GAAe,EAChF,OACE,kBACEC,UAAU,sBACVC,IAAG,CAAGC,EAAAA,GAAYC,EAAAA,GAAf,SAEH,eAAKF,IAAG,CAAGG,EAAAA,GAAOC,EAAAA,GAAV,SACN,eAAKJ,IAAKK,EAAAA,KACR,QAAC,IAAD,CAASC,QAAQ,OAGrB,QAAC,KAAD,CACEN,IAAG,CAAGG,EAAAA,GAAOI,EAAAA,GAAV,OACHC,gBAAiBZ,EACjBG,UAAU,2BAEV,QAAC,KAAD,CAAmBC,IAAKK,EAAAA,GAAON,UAAU,wBACvC,QAAC,KAAD,CAAWA,UAAU,cAAcF,IACnC,QAAC,KAAD,CAAiBE,UAAU,oBAAoBD,Q,gLCYzD,MArByC,IAAwB,gBAAvB,SAAEW,EAAF,KAAYC,GAAW,EAC/D,MAAMb,EAAQY,GAAY,GAEpBE,EAAWD,EAAKE,gBAAgBC,MAAMC,MAC1CC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBrB,EAAMqB,iBAGnC,WAAEC,GAAeT,EAAKU,kBACtBC,EAAcF,EAAa,EAAKA,EAAa,KAC7CG,EAA2B,IAAfH,EAAoB,OAAS,QACzCrB,GAAWa,MAAAA,OAAA,EAAAA,EAAUK,KAAKO,cAAgB,mBAAkBF,KAAcC,IAEhF,OACE,QAACE,EAAA,EAAD,CACE5B,mBAAoBe,MAAAA,GAAF,UAAEA,EAAUK,YAAZ,iBAAE,EAAgBS,aAAlB,iBAAE,EAAuBC,uBAAzB,iBAAE,EAAwCC,gBAAgBC,OAAOC,gBAAjE,aAAE,EAAyEC,IAC7FjC,MAAOA,EACPC,SAAUA,KCwDhB,MAtDkD,IAAqC,IAApC,SAAEiC,EAAF,YAAYC,EAAZ,KAAyBtB,GAAW,EACrF,MAAMD,EAAWuB,EAAYvB,SAAWuB,EAAYvB,SAAW,IACzD,MAAEI,GAAUH,EAAKU,kBACjBa,EAAevB,EAAKE,gBAAgBC,MAAMC,MAC9CC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBT,EAASS,gBAG5C,OACE,QAAC,IAAD,MACE,QAACgB,EAAA,EAAD,MACE,qBACGzB,EADH,MACgB0B,EAAAA,EAAAA,QAEhB,gBAAMC,KAAK,cAAcC,QAASJ,MAAAA,GAAAA,EAAcjB,KAAOiB,EAAajB,KAAKO,YAAc,MACvF,gBAAMe,SAAS,eAAeD,QAASF,EAAAA,EAAAA,SACvC,gBAAMG,SAAS,UAAUD,QAAQ,aACjC,gBAAMC,SAAS,WAAWD,QAAU,GAAE5B,OAAc0B,EAAAA,EAAAA,WACpD,gBAAMG,SAAS,SAASD,QAASF,EAAAA,EAAAA,QAAiBJ,EAASQ,WAC1DJ,EAAAA,EAAAA,WAAmB,gBAAMG,SAAS,oBAAoBD,QAASF,EAAAA,EAAAA,YAChE,gBAAMC,KAAK,eAAeC,QAAQ,yBAClC,gBAAMD,KAAK,gBAAgBC,QAAU,GAAE5B,OAAc0B,EAAAA,EAAAA,WACrD,gBAAMC,KAAK,cAAcC,QAASF,EAAAA,EAAAA,QAAiBJ,EAASQ,WAC3DJ,EAAAA,EAAAA,UACC,gBACEC,KAAK,eACLC,QAAU,IAAGF,EAAAA,EAAAA,QAAAA,MAAqB,wBAAwB,SAIhE,QAACK,EAAA,EAAD,MACE,QAAC,EAAD,CACE/B,SAAUuB,EAAYvB,SACtBC,KAAMA,KAER,gBAAMO,GAAG,YAAYjB,IAAG,CAAGyC,EAAAA,GAAUtC,EAAAA,GAAb,SACtB,eAAKH,IAAKK,EAAAA,KACR,eAAKL,IAAK0C,EAAAA,IACP7B,EAAM8B,KAAI,QAAC,KAAE3B,GAAH,SACT,QAAC4B,EAAA,EAAD,CAAUC,IAAK7B,EAAK8B,OAAOC,KAAMC,KAAMhC,WAK/C,QAACiC,EAAA,EAAD,CACEC,YAAalB,EAAYkB,YACzBC,SAAUnB,EAAYmB,SACtBC,WAAYpB,EAAYoB,cAE1B,QAACC,EAAA,EAAD","sources":["webpack://devdave/./src/components/header/HeadOfTitle.tsx","webpack://devdave/./src/components/header/MetaHeadOfTitle.tsx","webpack://devdave/./src/templates/category.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  inner,\n  outer,\n  ResponsiveHeaderBackground,\n  SiteArchiveHeader,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderBackground,\n  SiteHeaderContent,\n  SiteNavMain,\n  SiteTitle,\n} from '../../styles/shared';\nimport SiteNav from './SiteNav';\n\ninterface Props {\n  backgroundImageSrc?: string;\n  title: string;\n  subTitle: string;\n}\n\nconst HeadOfTitle: React.FC<Props> = ({ backgroundImageSrc, title, subTitle }) => {\n  return (\n    <header\n      className=\"site-archive-header\"\n      css={[SiteHeader, SiteArchiveHeader]}\n    >\n      <div css={[outer, SiteNavMain]}>\n        <div css={inner}>\n          <SiteNav isHome={false} />\n        </div>\n      </div>\n      <ResponsiveHeaderBackground\n        css={[outer, SiteHeaderBackground]}\n        backgroundImage={backgroundImageSrc}\n        className=\"site-header-background\"\n      >\n        <SiteHeaderContent css={inner} className=\"site-header-content\">\n          <SiteTitle className=\"site-title\">{title}</SiteTitle>\n          <SiteDescription className=\"site-description\">{subTitle}</SiteDescription>\n        </SiteHeaderContent>\n      </ResponsiveHeaderBackground>\n    </header>\n  );\n};\n\nexport default HeadOfTitle;\n","import React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PageContext } from '../../templates/post';\nimport HeadOfTitle from './HeadOfTitle';\n\ninterface Props {\n  category: string;\n  data: {\n    allCategoryYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              gatsbyImageData: IGatsbyImageData;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst MetaHeadOfTitle: React.FC<Props> = ({ category, data }) => {\n  const title = category || '';\n\n  const MetaData = data.allCategoryYaml.edges.find(\n    n => n.node.id.toLowerCase() === title.toLowerCase(),\n  );\n\n  const { totalCount } = data.allMarkdownRemark;\n  const postsCount = (totalCount > 0) ? totalCount : 'No';\n  const postNoun = (totalCount === 1) ? 'post' : 'posts';\n  const subTitle = MetaData?.node.description || `A collection of ${postsCount} ${postNoun}`;\n\n  return (\n    <HeadOfTitle\n      backgroundImageSrc={MetaData?.node?.image?.childImageSharp?.gatsbyImageData.images.fallback?.src}\n      title={title}\n      subTitle={subTitle}\n    />\n  );\n};\n\nexport default MetaHeadOfTitle;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport { Footer } from '../components/Footer';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { inner, outer, PostFeed, SiteMain } from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\nimport Pagination from '../components/Pagination';\nimport MetaHeadOfTitle from '../components/header/MetaHeadOfTitle';\n\ninterface CategoryTemplateProps {\n  location: Location;\n  pageContext: {\n    limit: number;\n    skip: number;\n    currentPage: number;\n    numPages: number;\n    pathPrefix: string;\n    category: string;\n  };\n  data: {\n    allCategoryYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              gatsbyImageData: IGatsbyImageData;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Category: React.FC<CategoryTemplateProps> = ({ location, pageContext, data }) => {\n  const category = pageContext.category ? pageContext.category : '';\n  const { edges } = data.allMarkdownRemark;\n  const CategoryData = data.allCategoryYaml.edges.find(\n    n => n.node.id.toLowerCase() === category.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>\n          {category} - {config.title}\n        </title>\n        <meta name=\"description\" content={CategoryData?.node ? CategoryData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${category} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${category} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <MetaHeadOfTitle\n          category={pageContext.category}\n          data={data}\n        />\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={PostFeed}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Pagination\n          currentPage={pageContext.currentPage}\n          numPages={pageContext.numPages}\n          pathPrefix={pageContext.pathPrefix}\n        />\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Category;\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!, $category: String!) {\n    allCategoryYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(\n                layout: CONSTRAINED\n                width: 1440\n              )\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { category: { eq: $category } }, frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 1440\n                )\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["backgroundImageSrc","title","subTitle","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","category","data","MetaData","allCategoryYaml","edges","find","n","node","id","toLowerCase","totalCount","allMarkdownRemark","postsCount","postNoun","description","HeadOfTitle","image","childImageSharp","gatsbyImageData","images","fallback","src","location","pageContext","CategoryData","Helmet","config","name","content","property","pathname","Wrapper","SiteMain","PostFeed","map","PostCard","key","fields","slug","post","Pagination","currentPage","numPages","pathPrefix","Footer"],"sourceRoot":""}