{"version":3,"file":"component---src-templates-category-tsx-3e8d64f5501810067c14.js","mappings":"8NA6IA,UAhFkD,IAAsC,IAAD,YAApC,SAAEA,EAAF,YAAYC,EAAZ,KAAyBC,GAAW,EACrF,MAAMC,EAAWF,EAAYE,SAAWF,EAAYE,SAAW,IACzD,MAAEC,EAAF,WAASC,GAAeH,EAAKI,kBAC7BC,EAAeL,EAAKM,gBAAgBJ,MAAMK,MAC9CC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBV,EAASU,gBAG5C,OACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,qBACGV,EADH,MACgBW,EAAAA,EAAAA,QAEhB,gBAAMC,KAAK,cAAcC,QAAST,MAAAA,GAAAA,EAAcI,KAAOJ,EAAaI,KAAKM,YAAc,MACvF,gBAAMC,SAAS,eAAeF,QAASF,EAAAA,EAAAA,SACvC,gBAAMI,SAAS,UAAUF,QAAQ,aACjC,gBAAME,SAAS,WAAWF,QAAU,GAAEb,OAAcW,EAAAA,EAAAA,WACpD,gBAAMI,SAAS,SAASF,QAASF,EAAAA,EAAAA,QAAiBd,EAASmB,WAC1DL,EAAAA,EAAAA,WAAmB,gBAAMI,SAAS,oBAAoBF,QAASF,EAAAA,EAAAA,YAChE,gBAAMC,KAAK,eAAeC,QAAQ,yBAClC,gBAAMD,KAAK,gBAAgBC,QAAU,GAAEb,OAAcW,EAAAA,EAAAA,WACrD,gBAAMC,KAAK,cAAcC,QAASF,EAAAA,EAAAA,QAAiBd,EAASmB,WAC3DL,EAAAA,EAAAA,UACC,gBACEC,KAAK,eACLC,QAAU,IAAGF,EAAAA,EAAAA,QAAAA,MAAqB,wBAAwB,SAIhE,QAAC,IAAD,MACE,kBACEM,UAAU,sBACVC,IAAG,CAAGC,EAAAA,GAAYC,EAAAA,GAAf,SAEH,eAAKF,IAAG,CAAGG,EAAAA,GAAOC,EAAAA,GAAV,SACN,eAAKJ,IAAKK,EAAAA,KACR,QAAC,IAAD,CAASC,QAAQ,OAGrB,QAAC,KAAD,CACEN,IAAG,CAAGG,EAAAA,GAAOI,EAAAA,GAAV,OACHC,gBAAiBtB,MAAAA,GAAF,UAAEA,EAAcI,YAAhB,iBAAE,EAAoBmB,aAAtB,iBAAE,EAA2BC,uBAA7B,iBAAE,EAA4CC,gBAAgBC,OAAOC,gBAArE,aAAE,EAA6EC,IAC9Ff,UAAU,2BAEV,QAAC,KAAD,CAAmBC,IAAKK,EAAAA,GAAON,UAAU,wBACvC,QAAC,KAAD,CAAWA,UAAU,cAAcjB,IACnC,QAAC,KAAD,CAAiBiB,UAAU,oBACxBb,MAAAA,GAAAA,EAAcI,KAAKM,YAClBV,EAAaI,KAAKM,aAElB,2CACmBZ,EAAa,GAAM,GAAEA,UACtB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,iBAOjC,gBAAMO,GAAG,YAAYS,IAAG,CAAGe,EAAAA,GAAUZ,EAAAA,GAAb,SACtB,eAAKH,IAAKK,EAAAA,KACR,eAAKL,IAAKgB,EAAAA,IACPjC,EAAMkC,KAAI,QAAC,KAAE3B,GAAH,SACT,QAAC,IAAD,CAAU4B,IAAK5B,EAAK6B,OAAOC,KAAMC,KAAM/B,WAK/C,QAAC,IAAD,CACEgC,YAAa1C,EAAY0C,YACzBC,SAAU3C,EAAY2C,SACtBC,WAAY5C,EAAY4C,cAE1B,QAAC,IAAD","sources":["webpack://devdave/./src/templates/category.tsx"],"sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\nimport Pagination from '../components/Pagination';\n\ninterface CategoryTemplateProps {\n  location: Location;\n  pageContext: {\n    limit: number;\n    skip: number;\n    currentPage: number;\n    numPages: number;\n    pathPrefix: string;\n    category: string;\n  };\n  data: {\n    allCategoryYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              gatsbyImageData: IGatsbyImageData;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Category: React.FC<CategoryTemplateProps> = ({ location, pageContext, data }) => {\n  const category = pageContext.category ? pageContext.category : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const CategoryData = data.allCategoryYaml.edges.find(\n    n => n.node.id.toLowerCase() === category.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>\n          {category} - {config.title}\n        </title>\n        <meta name=\"description\" content={CategoryData?.node ? CategoryData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${category} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${category} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={CategoryData?.node?.image?.childImageSharp?.gatsbyImageData.images.fallback?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{category}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {CategoryData?.node.description ? (\n                  CategoryData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={PostFeed}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Pagination\n          currentPage={pageContext.currentPage}\n          numPages={pageContext.numPages}\n          pathPrefix={pageContext.pathPrefix}\n        />\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Category;\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!, $category: String!) {\n    allCategoryYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(\n                layout: CONSTRAINED\n                width: 1440\n              )\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { category: { eq: $category } }, frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 1440\n                )\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["location","pageContext","data","category","edges","totalCount","allMarkdownRemark","CategoryData","allCategoryYaml","find","n","node","id","toLowerCase","config","name","content","description","property","pathname","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","gatsbyImageData","images","fallback","src","SiteMain","PostFeed","map","key","fields","slug","post","currentPage","numPages","pathPrefix"],"sourceRoot":""}