{"version":3,"file":"component---src-templates-category-tsx-5b1405afe31f4d628469.js","mappings":"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","sources":["webpack://devdave/./src/components/header/HeadOfTitle.tsx","webpack://devdave/./src/components/header/MetaHeadOfTitle.tsx","webpack://devdave/./src/components/header/CategoryMetaHeadOfTitle.tsx","webpack://devdave/./src/templates/category.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  inner,\n  outer,\n  ResponsiveHeaderBackground,\n  SiteArchiveHeader,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderBackground,\n  SiteHeaderContent,\n  SiteNavMain,\n  SiteTitle,\n} from '../../styles/shared';\nimport SiteNav from './SiteNav';\n\ninterface Props {\n  backgroundImageSrc?: string;\n  title: string;\n  subTitle: string;\n}\n\nconst HeadOfTitle: React.FC<Props> = ({ backgroundImageSrc, title, subTitle }) => {\n  return (\n    <header\n      className=\"site-archive-header\"\n      css={[SiteHeader, SiteArchiveHeader]}\n    >\n      <div css={[outer, SiteNavMain]}>\n        <div css={inner}>\n          <SiteNav isHome={false} />\n        </div>\n      </div>\n      <ResponsiveHeaderBackground\n        css={[outer, SiteHeaderBackground]}\n        backgroundImage={backgroundImageSrc}\n        className=\"site-header-background\"\n      >\n        <SiteHeaderContent css={inner} className=\"site-header-content\">\n          <SiteTitle className=\"site-title\">{title}</SiteTitle>\n          <SiteDescription className=\"site-description\">{subTitle}</SiteDescription>\n        </SiteHeaderContent>\n      </ResponsiveHeaderBackground>\n    </header>\n  );\n};\n\nexport default HeadOfTitle;\n","import React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PageContext } from '../../templates/post';\nimport HeadOfTitle from './HeadOfTitle';\n\ninterface Props {\n  title?: string;\n  edges: Array<{\n    node: {\n      id: string;\n      description: string;\n      image?: {\n        childImageSharp: {\n          gatsbyImageData: IGatsbyImageData;\n        };\n      };\n    };\n  }>;\n  allMarkdownRemark: {\n    totalCount: number;\n    edges: Array<{\n      node: PageContext;\n    }>;\n  };\n}\n\nconst MetaHeadOfTitle: React.FC<Props> = ({ title = '', edges, allMarkdownRemark }) => {\n  const metaData = edges.find(\n    n => n.node.id.toLowerCase() === title.toLowerCase(),\n  );\n\n  const { totalCount } = allMarkdownRemark;\n  const postsCount = (totalCount > 0) ? totalCount : 'No';\n  const postNoun = (totalCount === 1) ? 'post' : 'posts';\n  const subTitle = metaData?.node.description || `A collection of ${postsCount} ${postNoun}`;\n\n  return (\n    <HeadOfTitle\n      backgroundImageSrc={metaData?.node?.image?.childImageSharp?.gatsbyImageData.images.fallback?.src}\n      title={title}\n      subTitle={subTitle}\n    />\n  );\n};\n\nexport default MetaHeadOfTitle;\n","import React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { PageContext } from '../../templates/post';\nimport MetaHeadOfTitle from './MetaHeadOfTitle';\n\ninterface Props {\n  category?: string;\n  data: {\n    allCategoryYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              gatsbyImageData: IGatsbyImageData;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst CategoryMetaHeadOfTitle: React.FC<Props> = ({ category = '', data }) => {\n  return (\n    <MetaHeadOfTitle\n      title={category}\n      edges={data.allCategoryYaml.edges}\n      allMarkdownRemark={data.allMarkdownRemark} />\n  );\n};\n\nexport default CategoryMetaHeadOfTitle;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport { Footer } from '../components/Footer';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { inner, outer, PostFeed, SiteMain } from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\nimport Pagination from '../components/Pagination';\nimport CategoryMetaHeadOfTitle from '../components/header/CategoryMetaHeadOfTitle';\n\ninterface CategoryTemplateProps {\n  location: Location;\n  pageContext: {\n    limit: number;\n    skip: number;\n    currentPage: number;\n    numPages: number;\n    pathPrefix: string;\n    category: string;\n  };\n  data: {\n    allCategoryYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              gatsbyImageData: IGatsbyImageData;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Category: React.FC<CategoryTemplateProps> = ({ location, pageContext, data }) => {\n  const category = pageContext.category ? pageContext.category : '';\n  const { edges } = data.allMarkdownRemark;\n  const CategoryData = data.allCategoryYaml.edges.find(\n    n => n.node.id.toLowerCase() === category.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>\n          {category} - {config.title}\n        </title>\n        <meta name=\"description\" content={CategoryData?.node ? CategoryData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${category} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${category} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <CategoryMetaHeadOfTitle\n          category={pageContext.category}\n          data={data}\n        />\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={PostFeed}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Pagination\n          currentPage={pageContext.currentPage}\n          numPages={pageContext.numPages}\n          pathPrefix={pageContext.pathPrefix}\n        />\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Category;\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!, $category: String!) {\n    allCategoryYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(\n                layout: CONSTRAINED\n                width: 1440\n              )\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { category: { eq: $category } }, frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 1440\n                )\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","backgroundImageSrc","title","subTitle","___EmotionJSX","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","SiteNav","isHome","ResponsiveHeaderBackground","SiteHeaderBackground","backgroundImage","SiteHeaderContent","SiteTitle","SiteDescription","edges","allMarkdownRemark","metaData","find","n","node","id","toLowerCase","totalCount","postsCount","postNoun","description","HeadOfTitle","_metaData$node","image","_metaData$node$image","childImageSharp","_metaData$node$image$","gatsbyImageData","images","fallback","_metaData$node$image$2","src","category","data","MetaHeadOfTitle","allCategoryYaml","location","pageContext","CategoryData","IndexLayout","Helmet","config","name","content","property","siteUrl","pathname","facebook","twitter","split","Wrapper","CategoryMetaHeadOfTitle","SiteMain","PostFeed","map","_ref2","PostCard","key","fields","slug","post","Pagination","currentPage","numPages","pathPrefix","Footer"],"sourceRoot":""}